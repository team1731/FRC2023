package driverstation;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;

import edu.wpi.first.networktables.DoubleSubscriber;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NetworkTableValue;
import edu.wpi.first.networktables.NetworkTablesJNI;

public class Keypad extends JDialog implements KeyListener {
	private JLabel label;
	private JLabel picLabel;
    private NetworkTable table;
    static ImageIcon cube;
    static ImageIcon cone;
    static {
		BufferedImage coneImage = null;		
		BufferedImage cubeImage = null;
		try {
			coneImage = ImageIO.read(new File("images/cone.png"));
			cubeImage = ImageIO.read(new File("images/cube.png"));
			cube = new ImageIcon(cubeImage);
			cone = new ImageIcon(coneImage);
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    
	public Keypad() {
	    NetworkTableInstance inst = NetworkTableInstance.getDefault();
	    inst.startClient4("keypad");
	    inst.setServerTeam(1731);
	    inst.startDSClient();
		table = inst.getTable("KeyPad");
		setLayout(new FlowLayout());
		label = new JLabel();
		label.setFont(new Font("Arial Black", Font.BOLD, 48));
		add(label);
		picLabel = new JLabel(cube);
		
		add(picLabel);
		
		setSize(700, 500);
		setVisible(true);
	}
	
    public static void main(String[] args) {
    	Keypad keypad = new Keypad();
    	keypad.addKeyListener(keypad);
    }

    enum KeypadControl {
    	GET_CONE    (111), // "/"
    	GET_CUBE    (106), // "*"
    	CONE_LEFT   (100), // "4"
    	CUBE_MIDDLE (101), // "5"
    	CONE_RIGHT  (102), // "6"
    	DEPLOY_LOW   (97), // "1"
    	DEPLOY_MID   (98), // "2"
    	DEPLOY_HIGH  (99), // "3"
    	CLEAR_ENTRY  (96); // "0"
    	
    	private final int value;
    	private static Map map = new HashMap<>();
    	
    	private KeypadControl(int value) {
    		this.value = value;
    	}
    	
    	static {
    		for(KeypadControl control : KeypadControl.values()) {
    			map.put(control.value, control);
    		}
    	}
    	
    	public static KeypadControl valueOf(int control) {
    		return (KeypadControl) map.get(control);
    	}
    	
    	public int getValue() {
    		return value;
    	}
    }
    
    
    enum State {
        INPUT,
        PENDING;
    }


    Object stateTransitionTable[][] = {
    	// CURRENT      INPUT                     OPERATION            NEXT
        {State.INPUT,   KeypadControl.GET_CONE,   "lightUpBot",        State.INPUT},
        {State.INPUT,   KeypadControl.GET_CUBE,   "lightUpBot",        State.INPUT},
        {State.INPUT,   KeypadControl.CONE_LEFT,   null,               State.PENDING},
        {State.INPUT,   KeypadControl.CUBE_MIDDLE, null,               State.PENDING},
        {State.INPUT,   KeypadControl.CONE_RIGHT,  null,               State.PENDING},
        {State.INPUT,   KeypadControl.CLEAR_ENTRY, "clearInputBuffer", State.INPUT},
        {State.PENDING, KeypadControl.CLEAR_ENTRY, "clearInputBuffer", State.INPUT},
        {State.PENDING, KeypadControl.DEPLOY_LOW,  "armJoystick",      State.INPUT},
        {State.PENDING, KeypadControl.DEPLOY_MID,  "armJoystick",      State.INPUT},
        {State.PENDING, KeypadControl.DEPLOY_HIGH, "armJoystick",      State.INPUT},
    };
    
    void lightUpBot() {}
    void clearInputBuffer() {}
    void armJoystick() {}
    
	@Override
	public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();       
        if(KeypadControl.map.containsKey(keyCode)) {
        	String keypadEntry = KeypadControl.valueOf(keyCode).name();
	        label.setText(keypadEntry);
		    table.putValue("driver entry", NetworkTableValue.makeString(keypadEntry));
		    System.out.println("sent " + keypadEntry + " to network tables");
        }
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}
